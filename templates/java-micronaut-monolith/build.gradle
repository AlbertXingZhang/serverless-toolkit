import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer

plugins {
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id "application"
  id "java"
  id "net.ltgt.apt" version "0.18"
}

version "0.1"

repositories {
  mavenCentral()
  maven {url "https://jcenter.bintray.com"}
}

configurations {
  // for dependencies that are needed for development only
  developmentOnly
}

dependencies {

  annotationProcessor platform("io.micronaut:micronaut-bom:${micronaut_version}")
  annotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut:micronaut-validation"

  implementation platform("io.micronaut:micronaut-bom:${micronaut_version}")
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut:micronaut-inject"
  implementation "io.micronaut:micronaut-validation"
  implementation "io.micronaut:micronaut-runtime"
  implementation("io.micronaut.aws:micronaut-function-aws-api-proxy") {
    exclude group: "org.apache.httpcomponents"
    exclude group: "org.slf4j"
  }

  developmentOnly "io.micronaut:micronaut-http-server-netty:${micronaut_version}"

  runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.12.1"
  runtime "com.amazonaws:aws-lambda-java-log4j2:1.1.0"
}

mainClassName = "example.Application"

shadowJar {
  mergeServiceFiles()
  transform(Log4j2PluginsCacheFileTransformer)
}

run.classpath += configurations.developmentOnly
run.jvmArgs(
  '-noverify',
  '-XX:TieredStopAtLevel=1',
  '-Dcom.sun.management.jmxremote'
)

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
  options.compilerArgs.add('-parameters')
}
task exploded(type: Copy) {
  from sourceSets.main.output
  into "build/exploded"

  into('lib') {
    from configurations.compileClasspath
    from configurations.runtimeClasspath
  }
}

task(buildJson) {
  doLast {
    new File("$buildDir/build.json").newWriter().withWriter { w ->
      w << groovy.json.JsonOutput.toJson([
        service     : project.name,
        distribution: relativePath(shadowJar.archivePath),
        version     : shadowJar.version])
    }
  }
}

shadowJar.dependsOn exploded
shadowJar.finalizedBy(buildJson)
build.dependsOn shadowJar